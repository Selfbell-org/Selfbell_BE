name: CI/CD (dev → 8080)

on:
  push:
    branches: [ "dev" ]        # dev에 푸시될 때 실행
  workflow_dispatch: {}         # 수동 실행 버튼

permissions:
  contents: read

concurrency:
  group: deploy-8080            # 같은 브랜치 중복 배포 방지
  cancel-in-progress: true

env:
  IMAGE: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/safebell

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # (선택) 테스트. 필요 없으면 라인 통째로 지워도 됨.
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle
      - run: ./gradlew test --no-daemon || true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ github.sha }}
            ${{ env.IMAGE }}:dev

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to 8080 (with Firebase secret)
        uses: appleboy/ssh-action@v1.2.0
        env:
          # GitHub Secrets: 한 줄 base64 로 저장한 서비스키
          FIREBASE_CREDENTIALS_B64: ${{ secrets.FIREBASE_CREDENTIALS_B64 }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: FIREBASE_CREDENTIALS_B64
          script: |
            set -e

            # 디렉토리/ENV 파일 보장
            sudo install -d -m 0750 /etc/safebell
            sudo touch /etc/safebell.env
            grep -q '^SPRING_PROFILES_ACTIVE=' /etc/safebell.env || echo 'SPRING_PROFILES_ACTIVE=prod' | sudo tee -a /etc/safebell.env >/dev/null
            grep -q '^TZ=' /etc/safebell.env || echo 'TZ=Asia/Seoul' | sudo tee -a /etc/safebell.env >/dev/null

            # 0) Firebase 서비스키 복구(있을 때만)
            if [ -n "$FIREBASE_CREDENTIALS_B64" ]; then
              echo "$FIREBASE_CREDENTIALS_B64" | base64 -d | sudo tee /etc/safebell/firebase.json >/dev/null
              sudo chown root:root /etc/safebell/firebase.json
              sudo chmod 600 /etc/safebell/firebase.json
              # 앱이 참조할 경로: /app/safebell.json
              grep -q '^GOOGLE_APPLICATION_CREDENTIALS=' /etc/safebell.env \
                || echo 'GOOGLE_APPLICATION_CREDENTIALS=/app/safebell.json' | sudo tee -a /etc/safebell.env >/dev/null
            else
              echo "FIREBASE_CREDENTIALS_B64 not set. Skipping firebase.json restore."
              # 앱이 환경변수만 보고 동작하도록 했으면 없어도 됩니다.
            fi

            # 1) compose 파일(8080 단일 서비스, firebase.json → /app/safebell.json 바인드) 작성
            sudo install -d -m 0755 /opt/apps/safebell
            sudo tee /opt/apps/safebell/docker-compose.yml > /dev/null <<'YML'
services:
  safebell:
    image: REPLACED_BY_ACTION
    container_name: safebell
    restart: always
    ports: ["8080:8080"]
    env_file: [/etc/safebell.env]
    volumes:
      - /etc/safebell/firebase.json:/app/safebell.json:ro
YML

            # 실제 이미지로 치환(:dev)
            sudo sed -i 's#image: REPLACED_BY_ACTION#image: ${{ env.IMAGE }}:dev#' /opt/apps/safebell/docker-compose.yml

            # 2) 배포
            cd /opt/apps/safebell
            sudo docker compose pull
            sudo docker compose up -d

            # 3) 헬스체크(2xx/3xx/401/403/404 허용, 최대 ~90초 대기)
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/ || true)
              echo "try $i: code=$code"
              case "$code" in
                2*|3*|401|403|404) exit 0 ;;
              esac
              sleep 3
            done
            echo "Healthcheck failed, printing logs:"
            sudo docker logs --tail=200 safebell
            exit 1
