name: CI/CD (dev → 8080)

on:
  push:
    branches: [ "dev" ]      # dev에 푸시될 때만 실행
  workflow_dispatch: {}       # 수동 실행 버튼도 제공

permissions:
  contents: read

# 8080 배포는 한 번에 하나만(덮어쓰기 방지)
concurrency:
  group: deploy-8080
  cancel-in-progress: true

env:
  IMAGE: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/safebell

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # (선택) 테스트 돌리기
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle
      - run: ./gradlew test --no-daemon || true  # 테스트가 불안하면 임시로 통과

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image (:dev & :SHA)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ github.sha }}   # 롤백용
            ${{ env.IMAGE }}:dev                 # 항상 최신 dev

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to 8080
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            cd /opt/apps/safebell
            # compose가 항상 :dev를 가리키게 유지
            sudo sed -i 's#image: .*#image: ${{ env.IMAGE }}:dev#g' docker-compose.yml || true
            sudo docker compose pull
            sudo docker compose up -d
            # (선택) 스모크 체크
            for i in {1..10}; do
              curl -fsS http://localhost:8080/ && exit 0
              sleep 2
            done
            exit 1
